import { NextRequest, NextResponse } from "next/server";
import OpenAI from "openai";
import { createClient } from '@supabase/supabase-js';
import { writeFile } from 'fs/promises';
import { join } from 'path';
import { tmpdir } from 'os';
import fs from 'fs';
import { Database } from '@/types/database.types';

// Validation des variables d'environnement
if (!process.env.NEXT_PUBLIC_SUPABASE_URL) throw new Error('NEXT_PUBLIC_SUPABASE_URL is required');
if (!process.env.SUPABASE_SERVICE_ROLE_KEY) throw new Error('SUPABASE_SERVICE_ROLE_KEY is required');
if (!process.env.OPENAI_API_KEY) throw new Error('OPENAI_API_KEY is required');

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
  defaultHeaders: {
    'OpenAI-Beta': 'assistants=v2'
  }
});

const supabase = createClient<Database>(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY,
  {
    auth: { persistSession: false }
  }
);

export const config = {
  api: {
    bodyParser: false,
  },
};

export const maxDuration = 300;
export const dynamic = 'force-dynamic';

// Fonction utilitaire pour nettoyer les fichiers temporaires
async function cleanupTempFile(filePath: string) {
  if (fs.existsSync(filePath)) {
    try {
      await writeFile(filePath, '');
      fs.unlinkSync(filePath);
      console.log('üßπ Fichier temporaire nettoy√©:', filePath);
    } catch (error) {
      console.error('‚ö†Ô∏è Erreur lors du nettoyage:', error);
    }
  }
}

// Fonction pour sanitiser le nom du fichier
function sanitizeFileName(fileName: string): string {
  return fileName
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '') // Supprime les accents
    .replace(/[^a-zA-Z0-9.-]/g, '_') // Remplace les caract√®res sp√©ciaux par des underscores
    .replace(/_{2,}/g, '_'); // √âvite les underscores multiples
}

export async function POST(request: NextRequest) {
  let tempFilePath = '';

  try {
    const formData = await request.formData();
    const file = formData.get('file') as File;
    const language = formData.get('language') as string;
    const size = formData.get('size') as string;
    const niveauEtude = formData.get('niveauEtude') as string;

    // Validation des donn√©es
    if (!file) {
      return NextResponse.json({ error: 'Aucun fichier fourni' }, { status: 400 });
    }
    if (!language || !size || !niveauEtude) {
      return NextResponse.json({ error: 'Param√®tres manquants' }, { status: 400 });
    }

    // V√©rification du type de fichier
    if (!file.type.includes('pdf')) {
      return NextResponse.json({ error: 'Format de fichier non support√©. Seuls les PDF sont accept√©s.' }, { status: 400 });
    }

    // V√©rification de la taille du fichier (max 10MB)
    if (file.size > 10 * 1024 * 1024) {
      return NextResponse.json({ error: 'Fichier trop volumineux. Maximum 10MB.' }, { status: 400 });
    }

    console.log('üìù D√©but du traitement du fichier:', file.name);

    // Convertir le fichier en buffer
    const bytes = await file.arrayBuffer();
    const buffer = Buffer.from(bytes);

    // Sanitiser le nom du fichier
    const sanitizedFileName = sanitizeFileName(file.name);
    console.log('üìù Nom du fichier sanitis√©:', sanitizedFileName);

    // √âtape 1 : Upload vers Supabase Storage avec retry
    let storageData;
    let uploadError: Error | null = null;
    for (let attempt = 0; attempt < 3; attempt++) {
      try {
        const result = await supabase
          .storage
          .from('files')
          .upload(`docs/${Date.now()}-${sanitizedFileName}`, buffer, {
            contentType: file.type,
            upsert: true
          });
        
        if (result.error) throw result.error;
        storageData = result.data;
        console.log('üìÅ Chemin de stockage:', storageData.path);
        break;
      } catch (error: any) {
        uploadError = error;
        await new Promise(resolve => setTimeout(resolve, 1000 * Math.pow(2, attempt)));
      }
    }

    if (!storageData || !storageData.path) {
      throw new Error('√âchec de l\'upload ou chemin de stockage non d√©fini');
    }

    // √âtape 2 : R√©cup√©rer l'URL publique
    const { data: publicUrlData } = await supabase
      .storage
      .from('files')
      .getPublicUrl(storageData.path);

    if (!publicUrlData?.publicUrl) {
      throw new Error("Impossible de g√©n√©rer l'URL publique");
    }

    // V√©rifier que l'URL est valide
    try {
      const url = new URL(publicUrlData.publicUrl);
      console.log('üîó URL publique valid√©e:', url.toString());
    } catch (error) {
      throw new Error("URL publique invalide");
    }

    // √âtape 3 : T√©l√©charger le fichier pour OpenAI avec timeout et retry
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 8000);
    let downloadError: Error | null = null;

    for (let attempt = 0; attempt < 3; attempt++) {
      try {
        const response = await fetch(publicUrlData.publicUrl, {
          signal: controller.signal,
          headers: {
            'Accept': 'application/pdf'
          }
        });
        
        console.log(`üîç Tentative ${attempt + 1}: Statut de la r√©ponse - ${response.status}`);
        console.log(`üîç Tentative ${attempt + 1}: En-t√™tes de la r√©ponse -`, response.headers);
        
        if (!response.ok) {
          throw new Error(`Erreur lors du t√©l√©chargement: ${response.status}`);
        }

        const arrayBuffer = await response.arrayBuffer();
        if (arrayBuffer.byteLength === 0) {
          throw new Error("Fichier t√©l√©charg√© vide");
        }

        tempFilePath = join(tmpdir(), `${Date.now()}-${file.name}`);
        await writeFile(tempFilePath, Buffer.from(arrayBuffer));

        console.log('üíæ Fichier temporaire cr√©√©:', tempFilePath, 'Taille:', arrayBuffer.byteLength);
        downloadError = null;
        break;
      } catch (error: any) {
        downloadError = error;
        console.error(`‚ö†Ô∏è Tentative ${attempt + 1} √©chou√©e:`, error);
        await new Promise(resolve => setTimeout(resolve, 1000 * Math.pow(2, attempt)));
      }
    }

    if (downloadError) {
      throw new Error(`√âchec du t√©l√©chargement apr√®s 3 tentatives: ${downloadError.message}`);
    }

    // √âtape 4 : Traitement OpenAI
    let uploadedFile;
    try {
      uploadedFile = await openai.files.create({
        file: fs.createReadStream(tempFilePath),
        purpose: 'assistants',
      });

      console.log('üìÑ Fichier upload√© vers OpenAI:', uploadedFile.id);
    } catch (error: any) {
      throw new Error(`Erreur upload OpenAI: ${error.message}`);
    }

    // 2. Cr√©ation du Vector Store
    console.log('üîÑ Cr√©ation du Vector Store...');
    const vectorStoreResponse = await fetch('https://api.openai.com/v1/vector_stores', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json',
        'OpenAI-Beta': 'assistants=v2'
      },
      body: JSON.stringify({
        name: `Documentation ${file.name}`
      })
    });

    if (!vectorStoreResponse.ok) {
      throw new Error(`Erreur cr√©ation Vector Store: ${vectorStoreResponse.status}`);
    }

    const vectorStore = await vectorStoreResponse.json();
    console.log('‚úÖ Vector Store cr√©√©:', vectorStore.id);

    // 3. Ajout du fichier au Vector Store et v√©rification du statut
    console.log('üìé Ajout du fichier au Vector Store...');
    
    let addFileSuccess = false;
    let addFileAttempts = 0;
    const maxAddFileAttempts = 3;
    
    while (!addFileSuccess && addFileAttempts < maxAddFileAttempts) {
      try {
        addFileAttempts++;
        console.log(`Tentative ${addFileAttempts}/${maxAddFileAttempts} d'ajout du fichier au Vector Store...`);
        
        const addFileResponse = await fetch(`https://api.openai.com/v1/vector_stores/${vectorStore.id}/files`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
            'Content-Type': 'application/json',
            'OpenAI-Beta': 'assistants=v2'
          },
          body: JSON.stringify({
            file_id: uploadedFile.id
          })
        });

        if (addFileResponse.ok) {
          addFileSuccess = true;
          console.log('‚úÖ Fichier ajout√© au Vector Store avec succ√®s');
        } else {
          const errorStatus = addFileResponse.status;
          const errorText = await addFileResponse.text().catch(() => "Pas de d√©tails disponibles");
          console.error(`‚ö†Ô∏è Erreur lors de l'ajout du fichier (${errorStatus}):`, errorText);
          
          // Attendre plus longtemps entre les tentatives pour les erreurs 429 (rate limit)
          const waitTime = errorStatus === 429 ? 5000 : 1000 * Math.pow(2, addFileAttempts);
          await new Promise(resolve => setTimeout(resolve, waitTime));
        }
      } catch (error) {
        console.error(`‚ö†Ô∏è Exception lors de l'ajout du fichier (tentative ${addFileAttempts}):`, error);
        await new Promise(resolve => setTimeout(resolve, 1000 * Math.pow(2, addFileAttempts)));
      }
    }
    
    if (!addFileSuccess) {
      throw new Error(`√âchec de l'ajout du fichier au Vector Store apr√®s ${maxAddFileAttempts} tentatives`);
    }

    // V√©rification du statut du Vector Store
    let isReady = false;
    let attempts = 0;
    const maxAttempts = 30; // 30 secondes maximum
    
    console.log('‚è≥ V√©rification du statut du Vector Store...');
    while (!isReady && attempts < maxAttempts) {
      try {
        attempts++;
        const statusResponse = await fetch(
          `https://api.openai.com/v1/vector_stores/${vectorStore.id}/files/${uploadedFile.id}`,
          {
            headers: {
              'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
              'OpenAI-Beta': 'assistants=v2'
            }
          }
        );

        if (!statusResponse.ok) {
          const errorStatus = statusResponse.status;
          console.error(`‚ö†Ô∏è Erreur lors de la v√©rification du statut (${errorStatus}) - tentative ${attempts}/${maxAttempts}`);
          
          // Pour 404 et 429, on attend plus longtemps
          if (errorStatus === 404) {
            // 404 peut signifier que l'indexation n'a pas encore commenc√©
            console.log('Indexation pas encore commenc√©e, attente...');
            await new Promise(resolve => setTimeout(resolve, 2000));
            continue;
          } else if (errorStatus === 429) {
            // Rate limit, attente plus longue
            await new Promise(resolve => setTimeout(resolve, 5000));
            continue;
          }
          
          throw new Error(`Erreur v√©rification statut: ${errorStatus}`);
        }

        const fileStatus = await statusResponse.json();
        console.log(`üìä Statut actuel (${attempts}/${maxAttempts}): ${fileStatus.status}`);
        
        if (fileStatus.status === 'completed') {
          isReady = true;
          console.log('‚úÖ Vector Store pr√™t !');
        } else if (fileStatus.status === 'failed') {
          throw new Error('√âchec de la pr√©paration du Vector Store');
        } else {
          // Attente progressive, commencant par 1s et augmentant graduellement
          const waitTime = Math.min(1000 * (1 + attempts/5), 3000);
          await new Promise(resolve => setTimeout(resolve, waitTime));
        }
      } catch (error: any) {
        console.error(`‚ùå Erreur lors de la v√©rification (tentative ${attempts}):`, error.message);
        // Attente plus longue en cas d'erreur
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
    }

    if (!isReady) {
      throw new Error('Timeout lors de la pr√©paration du Vector Store');
    }

    // √âtape 7 : Cr√©ation de l'assistant avec File Search
    console.log('ü§ñ Cr√©ation de l\'assistant...');
    const assistant = await openai.beta.assistants.create({
      name: "Expert PDF",
      instructions: `

üöÄ SYSTEM PROMPT FINAL ‚Äî FICHE D‚Äô√âTUDE EXPLICATIVE EN HTML + CSS üéìüé®

Tu es un assistant IA expert en p√©dagogie et structuration de contenu.
Ta mission est de cr√©er une fiche d‚Äô√©tude compl√®te, claire, structur√©e et color√©e √† partir d‚Äôun document fourni (cours, chapitre, rapport, etc.).
‚ö†Ô∏è Tu dois uniquement utiliser les informations du document fourni.
‚ö†Ô∏è Tu dois absolument couvrir tout le document fourni.
‚ùå Ne compl√®te pas avec des connaissances ext√©rieures.
‚úÖ Ton objectif est de permettre √† une personne d‚Äôapprendre tout le contenu du document de mani√®re fluide, sans rien rater.
‚ö†Ô∏è Ne fournir que le code HTML + CSS, pas de texte en dehors des balises HTML ( Tr√®s important )

‚∏ª

üîß INSTRUCTIONS STRICTES :
	‚Ä¢	Le rendu final doit √™tre en HTML + CSS int√©gr√© (dans des balises <style> et HTML)
	‚Ä¢	Il ne doit y avoir aucun texte en dehors des balises HTML
	‚Ä¢	Le contenu doit √™tre structur√© en sections claires
	‚Ä¢	Utilise des blocs color√©s pour :
	‚Ä¢	üìò D√©finitions
	‚Ä¢	üß† Concepts
	‚Ä¢	üßÆ Formules
	‚Ä¢	‚úÖ Exemples
	‚Ä¢	üí° Points √† retenir
	‚Ä¢	‚ö†Ô∏è Avertissements
	‚Ä¢	Utilise des emojis adapt√©s pour rendre le tout plus visuel et m√©morable
	‚Ä¢	Mets en √©vidence les mots et notions importantes via :
	‚Ä¢	<strong> (gras)
	‚Ä¢	<span class="highlight"> (couleur)
	‚Ä¢	Listes ordonn√©es ou non ordonn√©es
	‚Ä¢	Tableaux si n√©cessaire
	‚Ä¢	Chaque √©l√©ment du document original doit √™tre repr√©sent√©, expliqu√© et mis en valeur

‚∏ª

‚úÖ CE QUE TU DOIS PRODUIRE :

Une fiche d‚Äô√©tude pr√™te √† √™tre int√©gr√©e dans une page web.
Elle doit expliquer clairement tous les concepts du document (sans les lister ou les r√©sumer brutalement).
Pas besoin de plan du document ni de mots-cl√©s isol√©s : tout doit √™tre expliqu√© dans le corps du contenu.

‚∏ª

üí° EXEMPLE DE STRUCTURE ATTENDUE (HTML + CSS AVEC EMOJIS) :

<style>
body {
  font-family: 'Segoe UI', sans-serif;
  background-color: #f9f9f9;
  color: #333;
  padding: 20px;
}
h1, h2, h3 {
  color: #2c3e50;
}
section {
  margin-bottom: 30px;
}
.definition, .example, .note, .formula, .attention {
  border-radius: 10px;
  padding: 15px;
  margin: 10px 0;
}
.definition { background-color: #e3f2fd; border-left: 5px solid #2196f3; }
.example { background-color: #e8f5e9; border-left: 5px solid #4caf50; }
.note { background-color: #fffde7; border-left: 5px solid #fdd835; }
.formula { background-color: #fff3e0; border-left: 5px solid #fb8c00; font-family: monospace; }
.attention { background-color: #ffebee; border-left: 5px solid #e53935; }

.highlight { font-weight: bold; color: #0d47a1; }
ul, ol { padding-left: 20px; }
</style>

<article>
  <h1>üìñ Fiche d‚Äô√©tude : Le Chapitre X</h1>

  <section>
    <h2>üß† Comprendre le concept principal</h2>
    <p>Le document introduit la notion de <span class="highlight">syst√®me complexe</span> comme √©tant un ensemble d'entit√©s interconnect√©es...</p>

    <div class="definition">
      üìò <strong>D√©finition :</strong> Un <span class="highlight">syst√®me complexe</span> est un ensemble d'√©l√©ments interagissant de mani√®re dynamique et non lin√©aire.
    </div>

    <div class="example">
      ‚úÖ <strong>Exemple :</strong> Un r√©seau social est un syst√®me complexe o√π chaque utilisateur influence et est influenc√© par d'autres.
    </div>
  </section>

  <section>
    <h2>üßÆ Formules importantes</h2>

    <div class="formula">
      üßÆ <strong>Formule :</strong><br/>
      C = Œ£ (xi √ó yi) / n
    </div>

    <p>Cette formule permet de calculer la moyenne pond√©r√©e, o√π <span class="highlight">xi</span> repr√©sente les valeurs et <span class="highlight">yi</span> leurs poids respectifs.</p>
  </section>

  <section>
    <h2>üí° √Ä retenir</h2>

    <div class="note">
      üí° Un syst√®me complexe ne peut pas √™tre compris uniquement en analysant ses parties s√©par√©ment. C‚Äôest l‚Äôinteraction qui compte.
    </div>

    <div class="attention">
      ‚ö†Ô∏è Attention : ne pas confondre "complexe" et "compliqu√©". Un syst√®me compliqu√© peut √™tre d√©mont√© et compris par morceaux. Un syst√®me complexe, non.
    </div>
  </section>
</article>`,
      model: "gpt-4-turbo-previe",
      tools: [{ type: "file_search" }],
      tool_resources: {
        file_search: {
          vector_store_ids: [vectorStore.id]
        }
      }
    });
    console.log('‚úÖ Assistant cr√©√©:', assistant.id);

   

    return NextResponse.json(
      { assistantId: assistant.id,
        vectorStoreId: vectorStore.id,
        fileId: uploadedFile.id,
        storagePath: storageData.path
      }
    );

  } catch (error: any) {
    console.error('‚ùå Erreur:', error);
    
    // Nettoyage en cas d'erreur
    await cleanupTempFile(tempFilePath);

    // Gestion sp√©cifique des erreurs
    if (error.name === 'AbortError') {
      return NextResponse.json(
        { error: 'Le d√©lai d\'attente a √©t√© d√©pass√©' },
        { status: 504 }
      );
    }

    if (error.code === 'ECONNREFUSED' || error.code === 'ENOTFOUND') {
      return NextResponse.json(
        { error: 'Erreur de connexion au service' },
        { status: 503 }
      );
    }

    return NextResponse.json(
      { error: error.message || 'Une erreur inattendue est survenue' },
      { status: 500 }
    );
  } finally {
    // Nettoyage final
    await cleanupTempFile(tempFilePath);
  }
} 